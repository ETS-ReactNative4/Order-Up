{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/admin/master_project/Order-up/node_modules/react-native-paper/src/components/RadioButtonIOS.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport Icon from \"./Icon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\n\nvar RadioButtonIOS = function (_React$Component) {\n  _inherits(RadioButtonIOS, _React$Component);\n\n  var _super = _createSuper(RadioButtonIOS);\n\n  function RadioButtonIOS() {\n    _classCallCheck(this, RadioButtonIOS);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RadioButtonIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, function (context) {\n        var _this$props = _this.props,\n            disabled = _this$props.disabled,\n            onPress = _this$props.onPress,\n            theme = _this$props.theme,\n            rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\"]);\n\n        var checkedColor = disabled ? theme.colors.disabled : _this.props.color || theme.colors.accent;\n        var rippleColor;\n        var checked = context ? context.value === _this.props.value : _this.props.status === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        }\n\n        return React.createElement(TouchableRipple, _extends({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            context && context.onValueChange(_this.props.value);\n            onPress && onPress();\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : undefined,\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }\n        }), React.createElement(View, {\n          style: {\n            opacity: checked ? 1 : 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        }, React.createElement(Icon, {\n          allowFontScaling: false,\n          source: \"done\",\n          size: 24,\n          color: checkedColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }\n        })));\n      });\n    }\n  }]);\n\n  return RadioButtonIOS;\n}(React.Component);\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);","map":{"version":3,"sources":["/Users/admin/master_project/Order-up/node_modules/react-native-paper/src/components/RadioButtonIOS.js"],"names":["React","color","RadioButtonContext","Icon","TouchableRipple","withTheme","RadioButtonIOS","context","props","disabled","onPress","theme","rest","checkedColor","colors","accent","rippleColor","checked","value","status","text","alpha","rgb","string","fade","undefined","onValueChange","styles","container","opacity","Component","displayName","StyleSheet","create","borderRadius","padding"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    return (\n      <RadioButtonContext.Consumer>\n        {context => {\n          const { disabled, onPress, theme, ...rest } = this.props;\n\n          const checkedColor = disabled\n            ? theme.colors.disabled\n            : this.props.color || theme.colors.accent;\n\n          let rippleColor;\n\n          const checked = context\n            ? context.value === this.props.value\n            : this.props.status === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n          }\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      context && context.onValueChange(this.props.value);\n                      onPress && onPress();\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : undefined}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <Icon\n                  allowFontScaling={false}\n                  source=\"done\"\n                  size={24}\n                  color={checkedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n"]},"metadata":{},"sourceType":"module"}